# Railway-specific deployment configuration

# The Dockerfile to use for Railway deployment
# Place this in your project root or reference it in your Railway service settings

FROM maven:3.9.4-openjdk-17-slim AS build

# Set working directory
WORKDIR /app

# Copy source code
COPY . .

# Build the application with optimizations
RUN mvn clean package -DskipTests -q -B

# Production runtime stage
FROM openjdk:17-jre-slim

# Create app directory and user for security
RUN useradd -m -u 1000 -r -s /bin/false appuser && \
    mkdir -p /app/data && \
    chown -R appuser:appuser /app

USER appuser
WORKDIR /app

# Copy the built JAR file from build stage
COPY --from=build --chown=appuser:appuser /app/target/aviation-discord-bot-*.jar app.jar

# Set optimized JVM environment variables for Railway
ENV JAVA_TOOL_OPTIONS="-XX:MaxRAMPercentage=70.0 -XX:InitialRAMPercentage=40.0 -XX:+UseG1GC -XX:+UseStringDeduplication -Xss256k -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport"
ENV SPRING_PROFILES_ACTIVE=production

# Expose port (Railway will override this)
EXPOSE 8080

# Health check for Railway
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD java -cp app.jar org.springframework.boot.loader.JarLauncher --server.port=8080 --management.health.defaults.enabled=false || exit 1

# Run the application
ENTRYPOINT ["java", "-jar", "app.jar"]
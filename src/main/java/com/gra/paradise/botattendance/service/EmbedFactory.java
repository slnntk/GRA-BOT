package com.gra.paradise.botattendance.service;

import com.gra.paradise.botattendance.config.DiscordConfig;
import com.gra.paradise.botattendance.model.AircraftType;
import com.gra.paradise.botattendance.model.MissionType;
import com.gra.paradise.botattendance.model.ActionSubType;
import com.gra.paradise.botattendance.model.Schedule;
import discord4j.core.spec.EmbedCreateSpec;
import discord4j.rest.util.Color;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import static com.gra.paradise.botattendance.config.DiscordConfig.*;

@Component
@RequiredArgsConstructor
public class EmbedFactory {

    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")
            .withZone(ZoneId.of("America/Sao_Paulo"));
    public static final String FOOTER_TEXT = "G.R.A - Controle Operacional | v1.0 | by Tiago Holanda";


    public EmbedCreateSpec createSystemOverviewEmbed() {
        return EmbedCreateSpec.builder()
                .image(FOOTER_CHOOSE_HELI_FIRST_SCREEN_URL)
                .title("üöÅ Sistema de Escalas √Åguias")
                .description("Controle as opera√ß√µes dos helic√≥pteros √Åguias da Pol√≠cia. üö®\n**Pronto para gerenciar?** Clique no bot√£o para iniciar.")
                .color(Color.of(0, 102, 204)) // Dark blue for authority
                .addField("üìã Instru√ß√µes", """
                    ‚Ä¢ Clique em **Criar Escala** para registrar uma opera√ß√£o
                    ‚Ä¢ Selecione o **helic√≥ptero**
                    ‚Ä¢ Escolha o **tipo de opera√ß√£o**
                    ‚Ä¢ Confirme os detalhes
                    """, false)
                .addField("üîî Status Atual", "Nenhuma escala ativa. Inicie uma opera√ß√£o agora! üöÅ", false)
                .footer(FOOTER_TEXT, DiscordConfig.GRA_IMAGE_URL)
                .timestamp(ZonedDateTime.now(FORTALEZA_ZONE).toInstant())
                .build();
    }

    public EmbedCreateSpec createAircraftSelectionEmbed() {
        return EmbedCreateSpec.builder()
                .image(FOOTER_CHOOSE_HELI_FIRST_SCREEN_URL)
                .title("üöÅ Selecione o Helic√≥ptero")
                .description("Escolha o helic√≥ptero para a opera√ß√£o.")
                .color(Color.of(0, 102, 204))
                .addField("üí° Dica", "Verifique a disponibilidade do helic√≥ptero antes de selecionar.", false)
                .footer(FOOTER_TEXT, DiscordConfig.GRA_IMAGE_URL)
                .timestamp(ZonedDateTime.now(FORTALEZA_ZONE).toInstant())
                .build();
    }

    public EmbedCreateSpec createMissionSelectionEmbed(AircraftType aircraftType) {
        String aircraftImageUrl = DiscordConfig.AIRCRAFT_IMAGE_URLS.getOrDefault(aircraftType, FOOTER_GRA_BLUE_URL);
        return EmbedCreateSpec.builder()
                .image(aircraftImageUrl)
                .title("üö® Escolha o Tipo de Opera√ß√£o")
                .description("**Helic√≥ptero**: " + aircraftType.getDisplayName() + "\nDefina o tipo de opera√ß√£o (ex.: Patrulha, A√ß√£o T√°tica ou Outros).")
                .color(Color.of(0, 102, 204))
                .addField("üí° Dica", "Patrulhamento refere-se √†s ocasi√µes em que o helic√≥ptero est√° em opera√ß√£o nas ruas, independentemente de ser em prioridade, c√≥digo 0 ou outras situa√ß√µes. J√° a√ß√µes s√£o momentos em que a equipe GRA ou os operadores de combate atuam diretamente em interven√ß√µes t√°ticas. Outros permite especificar uma miss√£o personalizada.", false)
                .footer(FOOTER_TEXT, DiscordConfig.GRA_IMAGE_URL)
                .timestamp(ZonedDateTime.now(FORTALEZA_ZONE).toInstant())
                .build();
    }

    public EmbedCreateSpec createActionSubTypeSelectionEmbed(AircraftType aircraftType) {
        String aircraftImageUrl = DiscordConfig.AIRCRAFT_IMAGE_URLS.getOrDefault(aircraftType, FOOTER_GRA_BLUE_URL);
        return EmbedCreateSpec.builder()
                .image(aircraftImageUrl)
                .title("‚öôÔ∏è Defina o Subtipo de Opera√ß√£o")
                .description("**Helic√≥ptero**: " + aircraftType.getDisplayName() + "\nEscolha o subtipo (Fuga, Tiro).")
                .color(Color.of(0, 102, 204))
                .addField("üí° Dica", "O subtipo define o tipo da opera√ß√£o. Escolha com precis√£o!", false)
                .footer(FOOTER_TEXT, DiscordConfig.GRA_IMAGE_URL)
                .timestamp(ZonedDateTime.now(FORTALEZA_ZONE).toInstant())
                .build();
    }

    public EmbedCreateSpec createActionOptionSelectionEmbed(AircraftType aircraftType, ActionSubType subType) {
        String aircraftImageUrl = DiscordConfig.AIRCRAFT_IMAGE_URLS.getOrDefault(aircraftType, FOOTER_GRA_BLUE_URL);
        return EmbedCreateSpec.builder()
                .image(aircraftImageUrl)
                .title("‚úÖ Finalize a Opera√ß√£o")
                .description("**Helic√≥ptero**: " + aircraftType.getDisplayName() + "\n**Subtipo**: " + subType.getDisplayName() + "\nSelecione a a√ß√£o (ex: Joalheria).")
                .color(Color.of(0, 102, 204))
                .addField("üí° Dica", "Confira todos os detalhes antes de finalizar!", false)
                .footer(FOOTER_TEXT, DiscordConfig.GRA_IMAGE_URL)
                .timestamp(ZonedDateTime.now(FORTALEZA_ZONE).toInstant())
                .build();
    }

    public EmbedCreateSpec createScheduleConfirmationEmbed(AircraftType aircraftType, MissionType missionType, String title, ActionSubType actionSubType, String actionOption) {
        String aircraftImageUrl = DiscordConfig.AIRCRAFT_IMAGE_URLS.getOrDefault(aircraftType, FOOTER_GRA_BLUE_URL);
        EmbedCreateSpec.Builder builder = EmbedCreateSpec.builder()
                .image(aircraftImageUrl)
                .title("‚úÖ Opera√ß√£o Confirmada!")
                .description("Escala operacional registrada com sucesso. Confira os detalhes: üìã")
                .addField("üìå T√≠tulo", title != null ? title : "Opera√ß√£o sem t√≠tulo", true)
                .addField("üöÅ Helic√≥ptero", aircraftType.getDisplayName(), true)
                .addField("üö® Opera√ß√£o", missionType.getDisplayName(), true);

        if (missionType == MissionType.OUTROS) {
            builder.addField("‚öôÔ∏è Atividade", actionOption != null ? actionOption : "N√£o especificado", true);
        } else if (missionType == MissionType.ACTION && actionSubType != null && actionOption != null) {
            builder.addField("‚öôÔ∏è Subtipo", actionSubType.getDisplayName(), true)
                    .addField("üîß Op√ß√£o", actionOption, true);
        } else {
            builder.addField("‚öôÔ∏è Subtipo", "N√£o especificado", true)
                    .addField("üîß Op√ß√£o", "N√£o especificado", true);
        }

        return builder.color(Color.of(0, 153, 0)) // Green for confirmation
                .footer(FOOTER_TEXT, DiscordConfig.GRA_IMAGE_URL)
                .timestamp(ZonedDateTime.now(FORTALEZA_ZONE).toInstant())
                .build();
    }

    public EmbedCreateSpec createSchedulePublicEmbed(Schedule schedule, List<String> crewNicknames) {
        List<String> updatedCrewNicknames = new ArrayList<>(crewNicknames);
        updatedCrewNicknames.add("**" + schedule.getCreatedByUsername() + "** üë®‚Äç‚úàÔ∏è");
        String crewList = updatedCrewNicknames.isEmpty() ? "Nenhum tripulante designado üö∂" : String.join("\n", updatedCrewNicknames);
        String aircraftImageUrl = DiscordConfig.AIRCRAFT_IMAGE_URLS.getOrDefault(schedule.getAircraftType(), FOOTER_GRA_BLUE_URL);
        EmbedCreateSpec.Builder builder = EmbedCreateSpec.builder()
                .image(aircraftImageUrl)
                .title("üìÖ Escala Ativa: " + schedule.getTitle())
                .description("Detalhes da opera√ß√£o! üöÅ")
                .addField("üöÅ Helic√≥ptero", schedule.getAircraftType().getDisplayName(), true)
                .addField("üö® Opera√ß√£o", schedule.getMissionType().getDisplayName(), true);

        if (schedule.getMissionType() == MissionType.OUTROS) {
            builder.addField("‚öôÔ∏è Descri√ß√£o", schedule.getOutrosDescription() != null ? schedule.getOutrosDescription() : "N√£o especificado", true);
        } else {
            builder.addField("‚öôÔ∏è Subtipo", schedule.getActionSubType() != null ? schedule.getActionSubType().getDisplayName() : "N√£o especificado", true)
                    .addField("üîß Op√ß√£o", schedule.getActionOption() != null ? schedule.getActionOption() : "N√£o especificado", true);
        }

        return builder.addField("üë®‚Äç‚úàÔ∏è Piloto", "**" + schedule.getCreatedByUsername() + "**", true)
                .addField("üìÖ In√≠cio", DATE_TIME_FORMATTER.format(schedule.getStartTime()), true)
                .addField("üîÑ Status", schedule.isActive() ? "Ativa   ‚úÖ" : "Encerrada   üõë", true)
                .addField("üë• Tripula√ß√£o", crewList, false)
                .color(getMissionColor(schedule.getMissionType()))
                .footer(FOOTER_TEXT, DiscordConfig.GRA_IMAGE_URL)
                .timestamp(ZonedDateTime.now(FORTALEZA_ZONE).toInstant())
                .build();
    }

    private Color getMissionColor(MissionType missionType) {
        return switch (missionType) {
            case PATROL -> Color.of(0, 102, 204); // Dark blue for patrol
            case ACTION -> Color.of(204, 0, 0); // Red for action
            case OUTROS -> Color.of(0, 153, 153); // Teal for outros
            default -> Color.of(0, 153, 153); // Teal for fallback
        };
    }
}
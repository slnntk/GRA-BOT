# Railway Deployment Configuration for GRA-BOT

# ========================
# ENVIRONMENT VARIABLES
# ========================

# Required: Discord Bot Token
DISCORD_BOT_TOKEN=your_discord_bot_token_here

# Memory Optimization (CRITICAL for Railway)
# These JVM options reduce memory usage significantly
JAVA_TOOL_OPTIONS=-XX:MaxRAMPercentage=75.0 -XX:InitialRAMPercentage=50.0 -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:MaxGCPauseMillis=100 -Xss256k

# Spring Boot optimizations
SPRING_MAIN_LAZY_INITIALIZATION=true

# Optional: Custom image URLs (use defaults if not provided)
# GRA_IMAGE_URL=https://your-custom-url.com/image.png
# FOOTER_GRA_BLUE_URL=https://your-custom-url.com/footer.png
# ...

# ========================
# RAILWAY CONFIGURATION
# ========================

# DO NOT set DATABASE_URL - the bot will use H2 automatically for cost savings
# Only set DATABASE_URL if you specifically need PostgreSQL features

# Expected memory usage with these optimizations:
# - Heap: ~200-300MB
# - Total: ~350-450MB
# - Cost reduction: ~60% compared to unoptimized deployment

# ========================
# BUILD CONFIGURATION
# ========================

# Railway automatically detects Maven and builds with:
# mvn clean package -DskipTests

# The optimized JAR includes:
# - Memory-efficient JVM settings
# - Optimized Discord4J configuration
# - H2 database (no external DB costs)
# - Minimal thread pool
# - Lazy bean initialization

# ========================
# MONITORING
# ========================

# The bot includes memory monitoring that logs:
# - Memory usage every 5 minutes
# - Startup memory usage
# - High memory usage warnings
# - Automatic garbage collection suggestions

# Check Railway logs for messages like:
# "Memory Status [Periodic monitoring] - Used: 250MB (65%), Free: 100MB, Max: 384MB"